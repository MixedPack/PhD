from scipy.optimize import minimizeimport numpy as npfrom astropy.io import fitsimport matplotlib.pyplot as pltfrom numpy.polynomial.polynomial import polyfitimport mathimport pandas as pdimport csv#*****************************Input values**********************************************Galaxies = pd.read_csv('../2_pipeline/0_Galaxies_Table/Galaxies_Table_EXC.csv')	FCC_index = Galaxies['FCC']M_r = Galaxies['M_r(mag)']M_g = Galaxies['M_g(mag)']R_e = Galaxies['R_e(arcsec)'] * 0.092 * 1000		#in pclog_stel_mass = Galaxies['log10(M_*/M_sun)']g_r = Galaxies['g'] - Galaxies['r']ERR_M_r = Galaxies['ERR_m_r(mag)']ERR_M_g = Galaxies['ERR_m_g(mag)']ERR_R_e = Galaxies['ERR_R_e(arcsec)']ERR_log_m = Galaxies['ERR_log10(M_*)']Kinematics = pd.read_csv('../2_pipeline/1_Kinematics_Table/Kinematics_Table_EXC.csv')Dispersion = Kinematics['Sigma']ERR_Disp = Kinematics['Error.Sigma']L_sun = 3.848*math.pow(10,26) #wattM_r_sun = 4.64M_V_sun = 4.83Mass_sun = 2*math.pow(10,30) #kg#*****************************Calculation***********************************************M_V = -0.565*g_r - 0.016 + M_gERR_M_V = 0.001*g_r - 0.001 + ERR_M_gDyn_Mass_half = 930 * np.power(Dispersion,2) * R_e	#M_1/2 half-light ratio dynamical mass [M_Sun]Lumin_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - M_V)) #L_1/2 half-light ration luminosity [L_Sun]Lumin_half_r = 0.5 * np.power(10, 0.4*(M_r_sun - M_r))ML_V = Dyn_Mass_half/Lumin_half_VML_r = Dyn_Mass_half/Lumin_half_rStell_Mass =  np.power(10,log_stel_mass)					#stellar mass in solar mass unitERR_M_dyn = 930 * np.sqrt(np.power(2*Dispersion*ERR_Disp*R_e,2)+np.power(np.power(Dispersion,2)*ERR_R_e,2))ERR_L_half_V = -0.4*Lumin_half_V*np.log(10)*ERR_M_VERR_L_half_r = -0.4*Lumin_half_r*np.log(10)*ERR_M_rERR_ML_V = (Dyn_Mass_half/Lumin_half_V) * np.sqrt(np.power(ERR_M_dyn/Dyn_Mass_half,2) + np.power(ERR_L_half_V/Lumin_half_V,2))ERR_ML_r = (Dyn_Mass_half/Lumin_half_r) * np.sqrt(np.power(ERR_M_dyn/Dyn_Mass_half,2) + np.power(ERR_L_half_r/Lumin_half_r,2))#writing a csv outputListDict = []for l in range(len(FCC_index)):	dict={'FCC':FCC_index[l],			 'M_r(mag)':"%.2f" % M_r[l], 'ERR_m_r(mag)':"%.2f" % ERR_M_r[l] ,		  'M_V(mag)': "%.2f" % M_V[l], 'ERR_m_V(mag)': "%.2f" % ERR_M_V[l],			'R_e(pc)':"%.2f" % R_e[l], 'ERR_R_e(pc)':"%.2f" % ERR_R_e[l] ,			'log10(M_*/M_sun)':"%.4f" % log_stel_mass[l], 'ERR_log10(M_*)':"%.4f" % ERR_log_m[l],			'Sigma(km/s)':"%.4f" % Dispersion[l], 'ERR_Sigma(km/s)':"%.4f" % ERR_Disp[l],		  	'Luminosity_r_1/2(L_sun)':"%.4f" % Lumin_half_r[l], 'ERR_L_r':"%.4f" % ERR_L_half_r[l],		  'Luminosity_V_1/2(L_sun)': "%.4f" % Lumin_half_V[l], 'ERR_L_V': "%.4f" % ERR_L_half_V[l],		  'Dyn_Mass_1/2(M_sun)': "%.4f" % Dyn_Mass_half[l], 'ERR_DynM': "%.4f" % ERR_M_dyn[l],		  'M/L_r(M_sun/L_sun)': "%.4f" % ML_r[l], 'ERR_M/L_r': "%.4f" % ERR_ML_r[l],		  'M/L_V(M_sun/L_sun)': "%.4f" % ML_V[l], 'ERR_M/L_V': "%.4f" % ERR_ML_V[l],		  }	ListDict.append(dict.copy())with open('../2_pipeline/3_MassDyn_Luminosity+Wolf/SAMI-DyM_StM_Lum.csv', 'w') as output_file:    dict_writer = csv.DictWriter(output_file, dict.keys())    dict_writer.writeheader()    dict_writer.writerows(ListDict)#*****************************Wolf et al. 2010***********************************************Wolf10 = pd.read_csv('../0_data/Literature/Wolf10.csv')W_DMass = Wolf10['Dyn_Mass[M_sun]']W_Lumin = 0.5*Wolf10['Luminosity[L_sun]']W_ML = Wolf10['M/L[M_sun/L_sun]']ERR_W_DMass = Wolf10['Dmass_ERR']ERR_W_Lumin = 0.5*Wolf10['Luminosity_ERR']ERR_W_ML = Wolf10['M/L_ERR']#*****************************Falcon-Barroso et al. 2011***********************************************Falcon11 = pd.read_csv('../0_data/Literature/FalconBarroso11_Spec.csv')F11_Disper = Falcon11['\sigma_e(km/s)']Falcon11_2 = pd.read_csv('../0_data/Literature/FalconBarroso11_Phot.csv')F11_Re = math.pi * Falcon11_2['R_{eV}(arcsec)'] * Falcon11_2['D(Mpc)'] / 648 *1000#in kpcF11_M_V = Falcon11_2['M_V(mag)']ERR_F11_Re = math.pi * Falcon11_2['R_{eV}_ERR'] * Falcon11_2['D(Mpc)'] / 648 *1000ERR_F11_M_V = Falcon11_2['M_V_ERR']ERR_F11_Disper = 0 #for the time beingF11_DMass_half = 930 * np.power(F11_Disper,2) * F11_ReF11_Lumin_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - F11_M_V))F11_ML_V = F11_DMass_half/F11_Lumin_half_VERR_F11_M_dyn = 930 * np.sqrt(np.power(2*F11_Disper*ERR_F11_Disper*F11_Re,2)+np.power(np.power(F11_Disper,2)*ERR_F11_Re,2))ERR_F11_Lum_V = -0.4*F11_Lumin_half_V*np.log(10)*ERR_F11_M_VERR_F11_ML_V = (F11_DMass_half/F11_Lumin_half_V) * np.sqrt(np.power(ERR_F11_M_dyn/F11_DMass_half,2) + np.power(ERR_F11_Lum_V/F11_Lumin_half_V,2))#*****************************Toloba et al. 2014 (2 papers)**********************************Toloba14 = pd.read_csv('../0_data/Literature/Toloba14_Masses.csv')T14_log_DMass = Toloba14['log(M_e,dyn)[M_sun]']T14_log_StMass = Toloba14['log(M_e,*)[M_sun]']T14_ML_r = Toloba14['(M/L)_dyn,r[M_sun/L_sun,r]']
T14_ML_V = T14_ML_r * (10**0.16)
Toloba14_2 = pd.read_csv('../0_data/Literature/Toloba14_PhotKinem.csv')T14_M_r = Toloba14_2['M_r[mag]']T14_M_V = 0.16 + T14_M_r 	# Girardi et al. 2004 and Toloba et al. 2014
T14_L_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - M_V))
ERR_T14_log_DMass = Toloba14['log(M_e,dyn)_ERR']ERR_T14_log_StMass = Toloba14['log(M_e,*)_ERR']ERR_T14_log_ML_V = (Toloba14['(M/L)_dyn,r_ERR']* (10**0.16))/(np.log(10)*T14_ML_V)
ERR_T14_L_half_V = 0 #for the time beingKimTol14 = pd.read_csv('../0_data/Literature/Kim14+Toloba14.csv')KT14_m_g = KimTol14['m_g[mag]']KT14_m_r = KimTol14['m_r[mag]']m_V = -0.565*(KT14_m_g-KT14_m_r) - 0.016 + KT14_m_gKT14_M_V = m_V - 31.12#ERR_KT14_M_V[i] = 0.001*g_r - 0.001 + ERR_KT14_M_gprint(m_V)for i in range(len(m_V)):	dummy_M_V = KimTol14['M_V[mag]']	#dummy_ERR = KimTol14['ERR_M_V[mag]']	if m_V == 'NaN':		KT14_M_V[i] = dummy_M_V[i]		#ERR_KT14_M_V[i] = dummy_ERR[i]print(KT14_M_V)#*****************************Plotting**************************************************Figure = plt.figure(figsize=(30,10))
#DynMass vs. Lum_1/2ax = Figure.add_subplot(131)#SAMI-Fornax
plt.plot(np.log10(Dyn_Mass_half),np.log10(Lumin_half_V),'o')ax.errorbar( np.log10(Dyn_Mass_half), np.log10(Lumin_half_V),					xerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), yerr=ERR_L_half_V/(Lumin_half_V*np.log(10)), fmt='.', ecolor='grey')#Wolf et al. 2010
plt.plot(np.log10(W_DMass),np.log10(W_Lumin),'x')ax.errorbar( np.log10(W_DMass), np.log10(W_Lumin),					xerr=ERR_W_DMass/(W_DMass*np.log(10)), yerr=ERR_W_Lumin/(W_Lumin*np.log(10)), fmt='.', ecolor='grey')#Falcon-Barroso et al. 2011 (SAURON))
plt.plot(np.log10(F11_DMass_half),np.log10(F11_Lumin_half_V),'x')ax.errorbar( np.log10(F11_DMass_half), np.log10(F11_Lumin_half_V),					xerr=ERR_F11_M_dyn/(F11_DMass_half*np.log(10)), yerr=ERR_F11_Lum_V/(F11_Lumin_half_V*np.log(10)), fmt='.', ecolor='grey')#Toloba et al. 2014 (SMAKCED)
plt.plot(T14_log_DMass, np.log10(T14_L_half_V),'x')ax.errorbar( T14_log_DMass, np.log10(T14_L_half_V),					xerr=ERR_T14_log_DMass, yerr=ERR_T14_L_half_V/(T14_L_half_V*np.log(10)), fmt='.', ecolor='grey')
ax.set_xlabel("log($(M_{dyn})_{1/2}$) [$M_\odot$]")ax.set_ylabel("log($L_{1/2}$) [$L_\odot$]")
#DynMass vs. M/Lbx = Figure.add_subplot(132)#SAMI-Fornax
plt.plot(np.log10(Dyn_Mass_half),np.log10(ML_V),'o')bx.errorbar( np.log10(Dyn_Mass_half), np.log10(ML_V),					xerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), yerr=ERR_ML_V/(ML_V*np.log(10)), fmt='.', ecolor='grey')#Wolf et al. 2010
plt.plot(np.log10(W_DMass),np.log10(W_ML),'x')bx.errorbar( np.log10(W_DMass), np.log10(W_ML),					xerr=ERR_W_DMass/(W_DMass*np.log(10)), yerr=ERR_W_ML/(W_ML*np.log(10)), fmt='.', ecolor='grey')#Falcon-Barroso et al. 2011 (SAURON))
plt.plot(np.log10(F11_DMass_half),np.log10(F11_ML_V),'x')bx.errorbar( np.log10(F11_DMass_half), np.log10(F11_ML_V),					xerr=ERR_F11_M_dyn/(F11_DMass_half*np.log(10)), yerr=ERR_F11_ML_V/(F11_ML_V*np.log(10)), fmt='.', ecolor='grey')#Toloba et al. 2014 (SMAKCED)
plt.plot(T14_log_DMass, np.log10(T14_ML_V),'x')bx.errorbar( T14_log_DMass, np.log10(T14_ML_V),					xerr=ERR_T14_log_DMass, yerr=ERR_T14_log_ML_V, fmt='.', ecolor='grey')
bx.set_xlabel("log($(M_{dyn})_{1/2}$) [$M_\odot$]")bx.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]")
#Lum_1/2 vs. M/Lcx = Figure.add_subplot(133)#SAMI-Fornax
plt.plot(np.log10(Lumin_half_V),np.log10(ML_V),'o')cx.errorbar( np.log10(Lumin_half_V), np.log10(ML_V),					xerr=ERR_L_half_V/(Lumin_half_V*np.log(10)), yerr=ERR_ML_V/(ML_V*np.log(10)), fmt='.', ecolor='grey')#Wolf et al. 2010
plt.plot(np.log10(W_Lumin),np.log10(W_ML),'x')cx.errorbar( np.log10(W_Lumin), np.log10(W_ML),					xerr=ERR_W_Lumin/(W_Lumin*np.log(10)), yerr=ERR_W_ML/(W_ML*np.log(10)), fmt='.', ecolor='grey')#Falcon-Barroso et al. 2011 (SAURON))
plt.plot(np.log10(F11_Lumin_half_V),np.log10(F11_ML_V),'x')cx.errorbar( np.log10(F11_Lumin_half_V), np.log10(F11_ML_V),					xerr=ERR_F11_Lum_V/(F11_Lumin_half_V*np.log(10)), yerr=ERR_F11_ML_V/(F11_ML_V*np.log(10)), fmt='.', ecolor='grey')#Toloba et al. 2014 (SMAKCED)
plt.plot(np.log10(T14_L_half_V), np.log10(T14_ML_V),'x')cx.errorbar( np.log10(T14_L_half_V), np.log10(T14_ML_V),					xerr=ERR_T14_L_half_V/(T14_L_half_V*np.log(10)), yerr=ERR_T14_log_ML_V, fmt='.', ecolor='grey')
cx.set_xlabel("log($L_{1/2}$) [$L_\odot$]")cx.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]")Figure.savefig("../2_pipeline/3_MassDyn_Luminosity+Wolf/DyM-L+Wolf.pdf")F11_DMass_half = 930 * np.power(F11_Disper,2) * F11_ReF11_Lumin_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - F11_M_V))F11_ML_V = F11_DMass_half/F11_Lumin_half_VERR_F11_M_dyn = 930 * np.sqrt(np.power(2*F11_Disper*ERR_F11_Disper*F11_Re,2)+np.power(np.power(F11_Disper,2)*ERR_F11_Re,2))ERR_F11_Lum_V = -0.4*F11_Lumin_half_V*np.log(10)*ERR_F11_M_VERR_F11_ML_V = (F11_DMass_half/F11_Lumin_half_V) * np.sqrt(np.power(ERR_F11_M_dyn/F11_DMass_half,2) + np.power(ERR_F11_Lum_V/F11_Lumin_half_V,2))Figure2 = plt.figure(figsize=(20,7))ax = Figure2.add_subplot(121)plt.plot(log_stel_mass, np.log10(Dyn_Mass_half),'.')ax.errorbar( log_stel_mass, np.log10(Dyn_Mass_half), 					xerr=ERR_log_m, yerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), fmt='.', ecolor='grey')ax.set_xlabel("log($M_{stel}$) [$M_\odot$]")ax.set_ylabel("log($M_{dyn}$) [$M_\odot$]")bx = Figure2.add_subplot(122)plt.plot(log_stel_mass, np.log10(Dyn_Mass_half)-log_stel_mass,'.')bx.errorbar( log_stel_mass, np.log10(Dyn_Mass_half)-log_stel_mass, 					xerr=ERR_log_m, yerr=np.sqrt(np.power(ERR_log_m,2)+np.power(ERR_M_dyn/(Dyn_Mass_half*np.log(10)),2)), fmt='.', ecolor='grey')bx.set_xlabel("log($M_{stel}$) [$M_\odot$]")bx.set_ylabel("log($(M_{dyn})_{1/2}$ / $M_{stel}$)")Figure2.savefig("../2_pipeline/3_MassDyn_Luminosity+Wolf/DyM_StM+Wolf.pdf")#Figure3 = plt.figure(figsize=(20,7)) #ax = Figure3.add_subplot(131)#plt.plot(np.log10(Dyn_Mass_half),np.log10(Lumin_half_r),'o')#ax.errorbar( np.log10(Dyn_Mass_half), np.log10(Lumin_half_r),#					xerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), yerr=ERR_L_half_r/(Lumin_half_r*np.log(10)), fmt='.', ecolor='grey')#plt.plot(T14_log_DMass, np.log10(T14_Lumin_r),'x')#ax.errorbar( T14_log_DMass, np.log10(T14_Lumin_r),#					xerr=ERR_T14_log_DMass, yerr=ERR_T14_Lumin_r/(T14_Lumin_r*np.log(10)), fmt='.', ecolor='grey')#ax.set_xlabel("log($(M_{dyn})_{1/2}$) [$M_\odot$]")#ax.set_ylabel("log($L_{1/2}$) [$L_\odot$]")#bx = Figure3.add_subplot(132)#plt.plot(np.log10(Dyn_Mass_half),np.log10(ML_r),'o')#bx.errorbar( np.log10(Dyn_Mass_half), np.log10(ML_r),#					xerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), yerr=ERR_ML_r/(ML_r*np.log(10)), fmt='.', ecolor='grey')#plt.plot(T14_log_DMass,np.log10(T14_ML_r),'x')#bx.errorbar( T14_log_DMass, np.log10(T14_ML_r),#					xerr=ERR_T14_log_DMass, yerr=ERR_T14_ML_r/(T14_ML_r*np.log(10)), fmt='.', ecolor='grey')#bx.set_xlabel("log($(M_{dyn})_{1/2}$) [$M_\odot$]")#bx.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]")#cx = Figure3.add_subplot(133)#plt.plot(np.log10(Lumin_half_V),np.log10(ML_r),'o')#cx.errorbar( np.log10(Lumin_half_V), np.log10(ML_r),#					xerr=ERR_L_half_V/(Lumin_half_V*np.log(10)), yerr=ERR_ML_r/(ML_r*np.log(10)), fmt='.', ecolor='grey')#plt.plot(np.log10(T14_Lumin_r), np.log10(T14_ML_r),'x')#cx.errorbar(np.log10(T14_Lumin_r), np.log10(T14_ML_r),#					xerr=ERR_T14_Lumin_r/(T14_Lumin_r*np.log(10)), yerr=ERR_T14_ML_r/(T14_ML_r*np.log(10)), fmt='.', ecolor='grey')#cx.set_xlabel("log($L_{1/2}$) [$L_\odot$]")#cx.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]")#Figure3.savefig("../2_pipeline/3_MassDyn_Luminosity+Wolf/DyM-L+Toloba.pdf")