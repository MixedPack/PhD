from scipy.optimize import minimizeimport numpy as npfrom astropy.io import fitsimport matplotlib.pyplot as pltfrom numpy.polynomial.polynomial import polyfitimport mathimport pandas as pdimport csv#*****************************Input values**********************************************Galaxies = pd.read_csv('../2_pipeline/0_Galaxies_Table/Galaxies_Table_EXC.csv')	FCC_index = Galaxies['FCC']M_r = Galaxies['M_r(mag)']M_g = Galaxies['M_g(mag)']R_e = Galaxies['R_e(arcsec)'] * 0.09550 * 1000		#in pclog_stel_mass_r = Galaxies['log10(M_*/M_sun)']log_stel_mass_V = log_stel_mass_r - 0.4*0.16g_r = Galaxies['g'] - Galaxies['r']ERR_M_r = Galaxies['ERR_m_r(mag)']ERR_M_g = Galaxies['ERR_m_g(mag)']ERR_R_e = Galaxies['ERR_R_e(arcsec)']ERR_log_stMass_r = Galaxies['ERR_log10(M_*)']ERR_log_stMass_V = ERR_log_stMass_rKinematics = pd.read_csv('../2_pipeline/1_Kinematics_Table/Kinematics_Table_EXC.csv')Dispersion = Kinematics['Sigma']ERR_Disp = Kinematics['Error.Sigma']#*****************************Replacing Giant SAMIs with Fornax3D results********************F3D = pd.read_csv('../0_data/Literature/F3D.csv')Fobj = F3D['OBJ']Fsigma = F3D['sigma_Re']for j in range(len(FCC_index)):	for k in range(len(Fobj)):		if FCC_index[j] == Fobj[k]:			print(Fobj[k])			Dispersion[j] = Fsigma[k]#*****************************Calculation***********************************************L_sun = 3.848*math.pow(10,26) #wattM_r_sun = 4.64M_V_sun = 4.83Mass_sun = 2*math.pow(10,30) #kgM_V = -0.565*g_r - 0.016 + M_gERR_M_V = 0.001*g_r - 0.001 + ERR_M_gDyn_Mass_half = 930 * np.power(Dispersion,2) * R_e	#M_1/2 half-light ratio dynamical mass [M_Sun]Lumin_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - M_V)) #L_1/2 half-light ration luminosity [L_Sun]Lumin_half_r = 0.5 * np.power(10, 0.4*(M_r_sun - M_r))ML_V = Dyn_Mass_half/Lumin_half_VML_r = Dyn_Mass_half/Lumin_half_rStell_Mass_r =  np.power(10,log_stel_mass_r)					#stellar mass in solar mass unitERR_M_dyn = 930 * np.sqrt(np.power(2*Dispersion*ERR_Disp*R_e,2)+np.power(np.power(Dispersion,2)*ERR_R_e,2))ERR_L_half_V = -0.4*Lumin_half_V*np.log(10)*ERR_M_VERR_L_half_r = -0.4*Lumin_half_r*np.log(10)*ERR_M_rERR_ML_V = (Dyn_Mass_half/Lumin_half_V) * np.sqrt(np.power(ERR_M_dyn/Dyn_Mass_half,2) + np.power(ERR_L_half_V/Lumin_half_V,2))ERR_ML_r = (Dyn_Mass_half/Lumin_half_r) * np.sqrt(np.power(ERR_M_dyn/Dyn_Mass_half,2) + np.power(ERR_L_half_r/Lumin_half_r,2))#writing a csv outputListDict = []for l in range(len(FCC_index)):	dict={'FCC':FCC_index[l],			 'M_r(mag)':"%.2f" % M_r[l], 'ERR_m_r(mag)':"%.2f" % ERR_M_r[l] ,		  'M_V(mag)': "%.2f" % M_V[l], 'ERR_M_V(mag)': "%.2f" % ERR_M_V[l],			'R_e(pc)':"%.2f" % R_e[l], 'ERR_R_e(pc)':"%.2f" % ERR_R_e[l] ,			'log10(M_*/M_sun)_r':"%.4f" % log_stel_mass_r[l], 'ERR_log10(M_*)_r':"%.4f" % ERR_log_stMass_r[l],			'Sigma(km/s)':"%.4f" % Dispersion[l], 'ERR_Sigma(km/s)':"%.4f" % ERR_Disp[l],		  	'Luminosity_r_1/2(L_sun)':"%.4f" % Lumin_half_r[l], 'ERR_L_r':"%.4f" % ERR_L_half_r[l],		  'Luminosity_V_1/2(L_sun)': "%.4f" % Lumin_half_V[l], 'ERR_L_V': "%.4f" % ERR_L_half_V[l],		  'Dyn_Mass_1/2(M_sun)': "%.4f" % Dyn_Mass_half[l], 'ERR_DynM': "%.4f" % ERR_M_dyn[l],		  'M/L_r(M_sun/L_sun)': "%.4f" % ML_r[l], 'ERR_M/L_r': "%.4f" % ERR_ML_r[l],		  'M/L_V(M_sun/L_sun)': "%.4f" % ML_V[l], 'ERR_M/L_V': "%.4f" % ERR_ML_V[l],		  }	ListDict.append(dict.copy())with open('../2_pipeline/3_MassDyn_Luminosity+Liter/tmp/SAMI-DyM_StM_Lum.csv', 'w') as output_file:    dict_writer = csv.DictWriter(output_file, dict.keys())    dict_writer.writeheader()    dict_writer.writerows(ListDict)#*****************************Wolf et al. 2010***********************************************Wolf10 = pd.read_csv('../0_data/Literature/Wolf10.csv')W_DMass = Wolf10['Dyn_Mass[M_sun]']W_Lumin = 0.5*Wolf10['Luminosity[L_sun]']W_ML = Wolf10['M/L[M_sun/L_sun]']ERR_W_DMass = Wolf10['Dmass_ERR']ERR_W_Lumin = 0.5*Wolf10['Luminosity_ERR']ERR_W_ML = Wolf10['M/L_ERR']#*****************************Falcon-Barroso et al. 2011***********************************************Falcon11 = pd.read_csv('../0_data/Literature/FalconBarroso11_Spec.csv')F11_Disper = Falcon11['\sigma_e(km/s)']F11_ML_stel_V = Falcon11['M\L*_V(M/Lsun)']ERR_F11_ML_stel_V = abs(Falcon11['M\L*_V+ERR'] - Falcon11['M\L*_V-ERR'])/2Falcon11_2 = pd.read_csv('../0_data/Literature/FalconBarroso11_Phot.csv')F11_Re = 1000 * math.pi * Falcon11_2['R_{eV}(arcsec)'] * Falcon11_2['D(Mpc)'] / 648 #in pcF11_M_V = Falcon11_2['M_V(mag)']ERR_F11_Re = 1000 * math.pi * Falcon11_2['R_{eV}_ERR'] * Falcon11_2['D(Mpc)'] / 648ERR_F11_M_V = Falcon11_2['M_V_ERR']ERR_F11_Disper = 0 #for the time beingF11_DMass_half = 930 * np.power(F11_Disper,2) * F11_ReF11_Lumin_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - F11_M_V))F11_ML_V = F11_DMass_half/F11_Lumin_half_VERR_F11_M_dyn = 930 * np.sqrt(np.power(2*F11_Disper*ERR_F11_Disper*F11_Re,2)+np.power(np.power(F11_Disper,2)*ERR_F11_Re,2))ERR_F11_Lum_V = -0.4*F11_Lumin_half_V*np.log(10)*ERR_F11_M_VERR_F11_ML_V = (F11_DMass_half/F11_Lumin_half_V) * np.sqrt(np.power(ERR_F11_M_dyn/F11_DMass_half,2) + np.power(ERR_F11_Lum_V/F11_Lumin_half_V,2))F11_log_stMass_V = np.log10(F11_ML_stel_V*(2*F11_Lumin_half_V))ERR_F11_log_stMass_V = np.sqrt(np.power(ERR_F11_ML_stel_V/(np.log(10)*F11_ML_stel_V),2)+np.power(ERR_F11_Lum_V/(np.log(10)*F11_Lumin_half_V),2))#writing a csv outputindex = Falcon11['Galaxy']for i in range(len(F11_Lumin_half_V)):	print(index[i], F11_ML_stel_V[i], F11_Lumin_half_V[i], F11_log_stMass_V[i])ListDict = []for l in range(len(index)):	dict={'OBJ':index[l],			'M_V(mag)': "%.2f" % F11_M_V[l], 'ERR_m_V(mag)': "%.2f" % ERR_F11_M_V[l],			'R_e(pc)':"%.2f" % F11_Re[l], 'ERR_R_e(pc)':"%.2f" % ERR_F11_Re[l] ,			'(M_*/L)_V':"%.4f" % F11_ML_stel_V[l], 'ERR_(M_*/L)_V':"%.4f" % ERR_F11_ML_stel_V[l],			'Sigma(km/s)':"%.4f" % F11_Disper[l], 'ERR_Sigma(km/s)':"%.4f" % 0.0,		  	'Luminosity_V_1/2(L_sun)': "%.4f" % F11_Lumin_half_V[l], 'ERR_L_V': "%.4f" % ERR_F11_Lum_V[l],		  'Dyn_Mass_1/2(M_sun)': "%.4f" % F11_DMass_half[l], 'ERR_DynM': "%.4f" % ERR_F11_M_dyn[l],		  'M/L_V(M_sun/L_sun)': "%.4f" % F11_ML_V[l], 'ERR_M/L_V': "%.4f" % ERR_F11_ML_V[l],		  }	ListDict.append(dict.copy())with open('../2_pipeline/3_MassDyn_Luminosity+Liter/tmp/SAURON-DyM_StM_Lum.csv', 'w') as output_file:    dict_writer = csv.DictWriter(output_file, dict.keys())    dict_writer.writeheader()    dict_writer.writerows(ListDict)#*****************************Toloba et al. 2014 (2 papers)**********************************Toloba14 = pd.read_csv('../0_data/Literature/Toloba14_Masses.csv')T14_log_DMass = Toloba14['log(M_e,dyn)[M_sun]']T14_log_StMass_r = Toloba14['log(M_e,*)[M_sun]']T14_log_StMass_V = T14_log_StMass_r - 0.4*0.16T14_ML_r = Toloba14['(M/L)_dyn,r[M_sun/L_sun,r]']T14_ML_V = T14_ML_r * (10**0.16)Toloba14_2 = pd.read_csv('../0_data/Literature/Toloba14_PhotKinem.csv')T14_M_r = Toloba14_2['M_r[mag]']T14_M_V = 0.16 + T14_M_r 	# Girardi et al. 2004 and Toloba et al. 2014T14_L_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - T14_M_V))ERR_T14_log_DMass = Toloba14['log(M_e,dyn)_ERR']ERR_T14_log_StMass_r = Toloba14['log(M_e,*)_ERR']ERR_T14_log_StMass_V = ERR_T14_log_StMass_rERR_T14_log_ML_V = (Toloba14['(M/L)_dyn,r_ERR']* (10**0.16))/(np.log(10)*T14_ML_V)ERR_T14_L_half_V = 0 #for the time being#*****************************Plotting**************************************************Figure = plt.figure(figsize=(30,12))#DynMass vs. Lum_1/2ax = Figure.add_subplot(131)#SAMI-Fornaxplt.plot(np.log10(Dyn_Mass_half),np.log10(Lumin_half_V),'r.')ax.errorbar( np.log10(Dyn_Mass_half), np.log10(Lumin_half_V),					xerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), yerr=ERR_L_half_V/(Lumin_half_V*np.log(10)), fmt='r.', ecolor='grey')#Wolf et al. 2010plt.plot(np.log10(W_DMass),np.log10(W_Lumin),'bx')ax.errorbar( np.log10(W_DMass), np.log10(W_Lumin),					xerr=ERR_W_DMass/(W_DMass*np.log(10)), yerr=ERR_W_Lumin/(W_Lumin*np.log(10)), fmt='bx', ecolor='grey')#Falcon-Barroso et al. 2011 (SAURON))plt.plot(np.log10(F11_DMass_half),np.log10(F11_Lumin_half_V),'g+')ax.errorbar( np.log10(F11_DMass_half), np.log10(F11_Lumin_half_V),					xerr=ERR_F11_M_dyn/(F11_DMass_half*np.log(10)), yerr=ERR_F11_Lum_V/(F11_Lumin_half_V*np.log(10)), fmt='g+', ecolor='grey')#Toloba et al. 2014 (SMAKCED)plt.plot(T14_log_DMass, np.log10(T14_L_half_V),'y*')ax.errorbar( T14_log_DMass, np.log10(T14_L_half_V),					xerr=ERR_T14_log_DMass, yerr=ERR_T14_L_half_V/(T14_L_half_V*np.log(10)), fmt='y*', ecolor='grey')ax.set_xlabel("log($(M_{dyn})_{1/2}$) [$M_\odot$]", fontsize = 20)ax.set_ylabel("log($L_{1/2}$) [$L_\odot$]", fontsize = 20)ax.tick_params(axis='both', which='major', labelsize=18)#DynMass vs. M/Lbx = Figure.add_subplot(132)#SAMI-Fornaxplt.plot(np.log10(Dyn_Mass_half),np.log10(ML_V),'r.')bx.errorbar( np.log10(Dyn_Mass_half), np.log10(ML_V),					xerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), yerr=ERR_ML_V/(ML_V*np.log(10)), fmt='r.', ecolor='grey')#Wolf et al. 2010plt.plot(np.log10(W_DMass),np.log10(W_ML),'bx')bx.errorbar( np.log10(W_DMass), np.log10(W_ML),					xerr=ERR_W_DMass/(W_DMass*np.log(10)), yerr=ERR_W_ML/(W_ML*np.log(10)), fmt='bx', ecolor='grey')#Falcon-Barroso et al. 2011 (SAURON))plt.plot(np.log10(F11_DMass_half),np.log10(F11_ML_V),'g+')bx.errorbar( np.log10(F11_DMass_half), np.log10(F11_ML_V),					xerr=ERR_F11_M_dyn/(F11_DMass_half*np.log(10)), yerr=ERR_F11_ML_V/(F11_ML_V*np.log(10)), fmt='g+', ecolor='grey')#Toloba et al. 2014 (SMAKCED)plt.plot(T14_log_DMass, np.log10(T14_ML_V),'y*')bx.errorbar( T14_log_DMass, np.log10(T14_ML_V),					xerr=ERR_T14_log_DMass, yerr=ERR_T14_log_ML_V, fmt='y*', ecolor='grey')bx.set_xlabel("log($(M_{dyn})_{1/2}$) [$M_\odot$]", fontsize = 20)bx.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]", fontsize = 20)bx.tick_params(axis='both', which='major', labelsize=18)#Lum_1/2 vs. M/Lcx = Figure.add_subplot(133)#SAMI-Fornaxplt.plot(np.log10(Lumin_half_V),np.log10(ML_V),'r.')cx.errorbar( np.log10(Lumin_half_V), np.log10(ML_V),					xerr=ERR_L_half_V/(Lumin_half_V*np.log(10)), yerr=ERR_ML_V/(ML_V*np.log(10)), fmt='r.', ecolor='grey')#Wolf et al. 2010plt.plot(np.log10(W_Lumin),np.log10(W_ML),'bx')cx.errorbar( np.log10(W_Lumin), np.log10(W_ML),					xerr=ERR_W_Lumin/(W_Lumin*np.log(10)), yerr=ERR_W_ML/(W_ML*np.log(10)), fmt='bx', ecolor='grey')#Falcon-Barroso et al. 2011 (SAURON))plt.plot(np.log10(F11_Lumin_half_V),np.log10(F11_ML_V),'g+')cx.errorbar( np.log10(F11_Lumin_half_V), np.log10(F11_ML_V),					xerr=ERR_F11_Lum_V/(F11_Lumin_half_V*np.log(10)), yerr=ERR_F11_ML_V/(F11_ML_V*np.log(10)), fmt='g+', ecolor='grey')#Toloba et al. 2014 (SMAKCED)plt.plot(np.log10(T14_L_half_V), np.log10(T14_ML_V),'y*')cx.errorbar( np.log10(T14_L_half_V), np.log10(T14_ML_V),					xerr=ERR_T14_L_half_V/(T14_L_half_V*np.log(10)), yerr=ERR_T14_log_ML_V, fmt='y*', ecolor='grey')cx.set_xlabel("log($L_{1/2}$) [$L_\odot$]", fontsize = 20)cx.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]", fontsize = 20)cx.tick_params(axis='both', which='major', labelsize=18)Figure.savefig("../2_pipeline/3_MassDyn_Luminosity+Liter/DyM-L+Liter.pdf", bbox_inches='tight')F11_DMass_half = 930 * np.power(F11_Disper,2) * F11_ReF11_Lumin_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - F11_M_V))F11_ML_V = F11_DMass_half/F11_Lumin_half_VERR_F11_M_dyn = 930 * np.sqrt(np.power(2*F11_Disper*ERR_F11_Disper*F11_Re,2)+np.power(np.power(F11_Disper,2)*ERR_F11_Re,2))ERR_F11_Lum_V = -0.4*F11_Lumin_half_V*np.log(10)*ERR_F11_M_VERR_F11_ML_V = (F11_DMass_half/F11_Lumin_half_V) * np.sqrt(np.power(ERR_F11_M_dyn/F11_DMass_half,2) + np.power(ERR_F11_Lum_V/F11_Lumin_half_V,2))Figure2 = plt.figure(figsize=(20,7))# M_* vs. M_dynax = Figure2.add_subplot(121)#SAMI-Fornaxplt.plot(log_stel_mass_V, np.log10(Dyn_Mass_half),'r.')ax.errorbar( log_stel_mass_V, np.log10(Dyn_Mass_half), 					xerr=ERR_log_stMass_V, yerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), fmt='r.', ecolor='grey')#for i in range(len(FCC_index)):	#	plt.annotate(str(int(FCC_index[i])), (log_stel_mass_V[i], np.log10(Dyn_Mass_half)[i]), fontsize=12)#Toloba et al. 2014 (SMAKCED)plt.plot(T14_log_StMass_V, T14_log_DMass,'y*')ax.errorbar( T14_log_StMass_V, T14_log_DMass, 					xerr=ERR_T14_log_StMass_V, yerr=ERR_T14_log_DMass, fmt='y*', ecolor='grey')#Falcon-Barroso et al. 2011 (SAURON))plt.plot(F11_log_stMass_V, np.log10(F11_DMass_half),'g+')ax.errorbar( F11_log_stMass_V, np.log10(F11_DMass_half), 					xerr=ERR_F11_log_stMass_V, yerr=ERR_F11_M_dyn/(F11_DMass_half*np.log(10)), fmt='g+', ecolor='grey')#for i in range(len(F11_log_stMass_V)):	#	plt.annotate(str(int(index[i])), (F11_log_stMass_V[i], np.log10(F11_DMass_half)[i]), fontsize=12)ax.set_xlabel("log($M_{stel}$) [$M_\odot$]")ax.set_ylabel("log($M_{dyn}$) [$M_\odot$]")#M_* vs. M_dyn/M_*bx = Figure2.add_subplot(122)#SAMI-Fornaxplt.plot(log_stel_mass_V, np.log10(Dyn_Mass_half)-log_stel_mass_V,'r.')bx.errorbar( log_stel_mass_V, np.log10(Dyn_Mass_half)-log_stel_mass_V, 					xerr=ERR_log_stMass_V, yerr=np.sqrt(np.power(ERR_log_stMass_V,2)+np.power(ERR_M_dyn/(Dyn_Mass_half*np.log(10)),2)), fmt='r.', ecolor='grey')#Toloba et al. 2014 (SMAKCED)plt.plot(T14_log_StMass_V, T14_log_DMass-T14_log_StMass_V,'y*')bx.errorbar( T14_log_StMass_V, T14_log_DMass-T14_log_StMass_V, 					xerr=ERR_T14_log_StMass_V, yerr=np.sqrt(np.power(ERR_T14_log_DMass,2)+np.power(ERR_T14_log_StMass_V,2)), fmt='y*', ecolor='grey')#Falcon-Barroso et al. 2011 (SAURON))plt.plot(F11_log_stMass_V, np.log10(F11_DMass_half)-F11_log_stMass_V,'g+')bx.errorbar( F11_log_stMass_V, np.log10(F11_DMass_half)-F11_log_stMass_V, 					xerr=ERR_F11_log_stMass_V, yerr=np.sqrt(np.power(ERR_F11_M_dyn/(F11_DMass_half*np.log(10)),2)+np.power(ERR_F11_log_stMass_V,2)), fmt='g+', ecolor='grey')bx.set_xlabel("log($M_{stel}$) [$M_\odot$]")bx.set_ylabel("log($(M_{dyn})_{1/2}$ / $M_{stel}$)")Figure2.savefig("../2_pipeline/3_MassDyn_Luminosity+Liter/DyM_StM+Liter.pdf")