from scipy.optimize import minimizeimport numpy as npfrom astropy.io import fitsimport matplotlib.pyplot as pltfrom numpy.polynomial.polynomial import polyfitimport mathimport pandas as pdimport csvimport scipy.optimize as optm #*****************************Input values**********************************************Galaxies = pd.read_csv('../2_pipeline/0_Galaxies_Table/Galaxies_Table_DWARF.csv')	FCC_index = Galaxies['FCC']M_r = Galaxies['M_r(mag)']M_g = Galaxies['M_g(mag)']R_e = Galaxies['R_e(arcsec)'] * 0.09550 * 1000		#in pclog_stel_mass_r = Galaxies['log10(M_*/M_sun)']log_stel_mass_V = log_stel_mass_r - 0.4*0.16g_r = Galaxies['g'] - Galaxies['r']ERR_M_r = Galaxies['ERR_m_r(mag)']ERR_M_g = Galaxies['ERR_m_g(mag)']ERR_R_e = Galaxies['ERR_R_e(arcsec)']ERR_log_stMass_r = Galaxies['ERR_log10(M_*)']ERR_log_stMass_V = ERR_log_stMass_rKinematics = pd.read_csv('../2_pipeline/0_Kinematics_Table/Kinematics_Table_DWARF.csv')Dispersion = Kinematics['Sigma']ERR_Disp = Kinematics['Error.Sigma']#*****************************Calculation***********************************************L_sun = 3.848*math.pow(10,26) #wattM_r_sun = 4.64M_V_sun = 4.83Mass_sun = 2*math.pow(10,30) #kgM_V = -0.565*g_r - 0.016 + M_gERR_M_V = 0.001*g_r - 0.001 + ERR_M_gDyn_Mass_half = 930 * np.power(Dispersion,2) * R_e	#M_1/2 half-light ratio dynamical mass [M_Sun]Lumin_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - M_V)) #L_1/2 half-light ration luminosity [L_Sun]Lumin_half_r = 0.5 * np.power(10, 0.4*(M_r_sun - M_r))ML_V = Dyn_Mass_half/Lumin_half_VML_r = Dyn_Mass_half/Lumin_half_rStell_Mass_r =  np.power(10,log_stel_mass_r)					#stellar mass in solar mass unitERR_M_dyn = 930 * np.sqrt(np.power(2*Dispersion*ERR_Disp*R_e,2)+np.power(np.power(Dispersion,2)*ERR_R_e,2))ERR_L_half_V = -0.4*Lumin_half_V*np.log(10)*ERR_M_VERR_L_half_r = -0.4*Lumin_half_r*np.log(10)*ERR_M_rERR_ML_V = (Dyn_Mass_half/Lumin_half_V) * np.sqrt(np.power(ERR_M_dyn/Dyn_Mass_half,2) + np.power(ERR_L_half_V/Lumin_half_V,2))ERR_ML_r = (Dyn_Mass_half/Lumin_half_r) * np.sqrt(np.power(ERR_M_dyn/Dyn_Mass_half,2) + np.power(ERR_L_half_r/Lumin_half_r,2))#*****************************Wolf et al. 2010***********************************************Wolf10 = pd.read_csv('../0_data/Literature/Wolf10.csv')W_DMass = Wolf10['Dyn_Mass[M_sun]']W_Lumin = 0.5*Wolf10['Luminosity[L_sun]']W_ML = Wolf10['M/L[M_sun/L_sun]']W_Disper = Wolf10['sigma_los[km/s]']ERR_W_DMass = Wolf10['Dmass_ERR']ERR_W_Lumin = 0.5*Wolf10['Luminosity_ERR']ERR_W_ML = Wolf10['M/L_ERR']ERR_W_Disper = Wolf10['sigma_ERR']#*****************************Falcon-Barroso et al. 2011***********************************************Falcon11 = pd.read_csv('../0_data/Literature/FalconBarroso11_Spec.csv')F11_Disper = Falcon11['\sigma_e(km/s)']F11_ML_stel_V = Falcon11['M\L*_V(M/Lsun)']ERR_F11_ML_stel_V = abs(Falcon11['M\L*_V+ERR'] - Falcon11['M\L*_V-ERR'])/2Falcon11_2 = pd.read_csv('../0_data/Literature/FalconBarroso11_Phot.csv')F11_Re = 1000 * math.pi * Falcon11_2['R_{eV}(arcsec)'] * Falcon11_2['D(Mpc)'] / 648 #in pcF11_M_V = Falcon11_2['M_V(mag)']ERR_F11_Re = 1000 * math.pi * Falcon11_2['R_{eV}_ERR'] * Falcon11_2['D(Mpc)'] / 648ERR_F11_M_V = Falcon11_2['M_V_ERR']ERR_F11_Disper = 0 #for the time beingF11_DMass_half = 930 * np.power(F11_Disper,2) * F11_ReF11_Lumin_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - F11_M_V))F11_ML_V = F11_DMass_half/F11_Lumin_half_VERR_F11_M_dyn = 930 * np.sqrt(np.power(2*F11_Disper*ERR_F11_Disper*F11_Re,2)+np.power(np.power(F11_Disper,2)*ERR_F11_Re,2))ERR_F11_Lum_V = -0.4*F11_Lumin_half_V*np.log(10)*ERR_F11_M_VERR_F11_ML_V = (F11_DMass_half/F11_Lumin_half_V) * np.sqrt(np.power(ERR_F11_M_dyn/F11_DMass_half,2) + np.power(ERR_F11_Lum_V/F11_Lumin_half_V,2))F11_log_stMass_V = np.log10(F11_ML_stel_V*(2*F11_Lumin_half_V))ERR_F11_log_stMass_V = np.sqrt(np.power(ERR_F11_ML_stel_V/(np.log(10)*F11_ML_stel_V),2)+np.power(ERR_F11_Lum_V/(np.log(10)*F11_Lumin_half_V),2))#*****************************Toloba et al. 2014 (2 papers)**********************************Toloba14 = pd.read_csv('../0_data/Literature/Toloba14_Masses.csv')T14_log_DMass = Toloba14['log(M_e,dyn)[M_sun]']T14_log_StMass_r = Toloba14['log(M_e,*)[M_sun]']T14_log_StMass_V = T14_log_StMass_r - 0.4*0.16T14_ML_r = Toloba14['(M/L)_dyn,r[M_sun/L_sun,r]']T14_ML_V = T14_ML_r * (10**0.16)Toloba14_2 = pd.read_csv('../0_data/Literature/Toloba14_PhotKinem.csv')T14_Disper = Toloba14_2['sigma_e[km/s]']T14_M_r = Toloba14_2['M_r[mag]']T14_M_V = 0.16 + T14_M_r 	# Girardi et al. 2004 and Toloba et al. 2014T14_L_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - T14_M_V))ERR_T14_Disper = Toloba14_2['sigma_e_ERR']ERR_T14_log_DMass = Toloba14['log(M_e,dyn)_ERR']ERR_T14_log_StMass_r = Toloba14['log(M_e,*)_ERR']ERR_T14_log_StMass_V = ERR_T14_log_StMass_rERR_T14_log_ML_V = (Toloba14['(M/L)_dyn,r_ERR']* (10**0.16))/(np.log(10)*T14_ML_V)ERR_T14_L_half_V = 0 #for the time being#*********************************Parabola Fit******************************************data = {'ML':W_ML, 'DynM':W_DMass, 'Lum':W_Lumin, 'Sigma':W_Disper}WolfDF = pd.DataFrame(data)someWolf1 = WolfDF[np.log10(WolfDF['DynM'])>6.5]someWolf = someWolf1[np.log10(someWolf1['Lum'])>5]def parabola(x, a, b, c):	return a*np.power(x,2) + b*x + cguess_params = [0.1, 0.1, 0.1]#Sigma vs. M/LSx1 = np.log10(pd.concat([someWolf['Sigma'], Dispersion, T14_Disper, F11_Disper]))Sy = np.log10(pd.concat([someWolf['ML'], ML_V, T14_ML_V, F11_ML_V]))  
Sfit_params, Spcov = optm.curve_fit(parabola, Sx1, Sy)Sx2 = np.log10(pd.concat([someWolf['Sigma'], T14_Disper, F11_Disper]))Sy2 = np.log10(pd.concat([someWolf['ML'], T14_ML_V, F11_ML_V]))  Sfit_params2, Spcov2 = optm.curve_fit(parabola, Sx2, Sy2)#DynMass vs. M/LDMx1 = pd.concat([np.log10(someWolf['DynM']), np.log10(Dyn_Mass_half), T14_log_DMass, np.log10(F11_DMass_half)])DMy = np.log10(pd.concat([someWolf['ML'], ML_V, T14_ML_V, F11_ML_V]))  DMfit_params, DMpcov = optm.curve_fit(parabola, DMx1, DMy)DMx2 = pd.concat([np.log10(someWolf['DynM']), T14_log_DMass, np.log10(F11_DMass_half)])DMy2 = np.log10(pd.concat([someWolf['ML'], T14_ML_V, F11_ML_V]))  DMfit_params2, DMpcov2 = optm.curve_fit(parabola, DMx2, DMy2)#Lum_1/2 vs. M/LLx1 = np.log10(pd.concat([someWolf['Lum'], Lumin_half_V, T14_L_half_V, F11_Lumin_half_V]))Ly = np.log10(pd.concat([someWolf['ML'], ML_V, T14_ML_V, F11_ML_V]))  Lfit_params, Lpcov = optm.curve_fit(parabola, Lx1, Ly)Lx2 =  np.log10(pd.concat([someWolf['Lum'], T14_L_half_V, F11_Lumin_half_V]))Ly2 = np.log10(pd.concat([someWolf['ML'], T14_ML_V, F11_ML_V]))  Lfit_params2, Lpcov2 = optm.curve_fit(parabola, Lx2, Ly2)#*****************************Plotting**************************************************Figure = plt.figure(figsize=(10,40))#Sigma vs. M/Lax = Figure.add_subplot(311)#SAMI-Fornaxplt.scatter(np.log10(Dispersion), np.log10(ML_V), marker='.', c='b', s=100, label='SAMI Fornax Dwarfs')#Wolf et al. 2010plt.scatter(np.log10(W_Disper), np.log10(W_ML), marker='X', c='y', s=100, label='Wolf et al. 2010')#Falcon-Barroso et al. 2011 (SAURON))plt.scatter(np.log10(F11_Disper), np.log10(F11_ML_V), marker='+', c='g', s=100, label= 'Falcon-Barroso et al. 2011')#Toloba et al. 2014 (SMAKCED)plt.scatter(np.log10(T14_Disper), np.log10(T14_ML_V), marker='*', c='r', s=80, label= 'Toloba et al. 2014')X_fit, Y_fit = zip(*sorted(zip(Sx1, parabola(Sx1, *Sfit_params))))
plt.plot(X_fit, Y_fit, 'k-')#X2_fit, Y2_fit = zip(*sorted(zip(Sx2, parabola(Sx2, *Sfit_params2))))
#plt.plot(X2_fit, Y2_fit, 'k-.')
ax.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]", fontsize = 20)ax.set_xlabel("log($\sigma_e$) [km/s]", fontsize = 20)ax.tick_params(axis='both', which='major', labelsize=18)xmin = -Sfit_params[1]/(2*Sfit_params[0])
ymin = -Sfit_params[1]**2/(4*Sfit_params[0])+Sfit_params[2]
ax.annotate("[%.3f"%xmin+",%.3f"%ymin+"]", xy=(xmin, ymin), xytext=(xmin-0.25, ymin+0.9),
            arrowprops=dict(arrowstyle="->"),fontsize = 16)
#xmin2 = -Sfit_params2[1]/(2*Sfit_params2[0])
#ymin2 = -Sfit_params2[1]**2/(4*Sfit_params2[0])+Sfit_params2[2]
#ax.annotate("[%.3f"%xmin2+",%.3f"%ymin2+"] WFT", xy=(xmin2, ymin2), xytext=(xmin2, ymin2+1.2),
#            arrowprops=dict(arrowstyle="->"),fontsize = 16)
#DynMass vs. M/Lbx = Figure.add_subplot(312)#SAMI-Fornaxplt.scatter(np.log10(Dyn_Mass_half),np.log10(ML_V), marker='.', c='b', s=100, label='SAMI Fornax Dwarfs')#Wolf et al. 2010plt.scatter(np.log10(W_DMass),np.log10(W_ML), marker='X', c='y', s=100, label='Wolf et al. 2010')#Falcon-Barroso et al. 2011 (SAURON))plt.scatter(np.log10(F11_DMass_half), np.log10(F11_ML_V), marker='+', c='g', s=100, label= 'Falcon-Barroso et al. 2011')#Toloba et al. 2014 (SMAKCED)plt.scatter(T14_log_DMass, np.log10(T14_ML_V), marker='*', c='r', s=80, label= 'Toloba et al. 2014')X_fit, Y_fit = zip(*sorted(zip(DMx1, parabola(DMx1, *DMfit_params))))
plt.plot(X_fit, Y_fit, 'k-')#X2_fit, Y2_fit = zip(*sorted(zip(DMx2, parabola(DMx2, *DMfit_params2))))
#plt.plot(X2_fit, Y2_fit, 'k-.')
bx.set_xlabel("log($(M_{dyn})_{1/2}$) [$M_\odot$]", fontsize = 20)bx.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]", fontsize = 20)bx.tick_params(axis='both', which='major', labelsize=18)xmin = -DMfit_params[1]/(2*DMfit_params[0])
ymin = -DMfit_params[1]**2/(4*DMfit_params[0])+DMfit_params[2]
bx.annotate("[%.3f"%xmin+",%.3f"%ymin+"]", xy=(xmin, ymin), xytext=(xmin-0.75, ymin+0.9),
            arrowprops=dict(arrowstyle="->"),fontsize = 16)
#xmin2 = -DMfit_params2[1]/(2*DMfit_params2[0])
#ymin2 = -DMfit_params2[1]**2/(4*DMfit_params2[0])+DMfit_params2[2]
#bx.annotate("[%.3f"%xmin2+",%.3f"%ymin2+"] WFT", xy=(xmin2, ymin2), xytext=(xmin2, ymin2+1.2),
#            arrowprops=dict(arrowstyle="->"),fontsize = 16)#Lum_1/2 vs. M/Lcx = Figure.add_subplot(313)#SAMI-Fornaxplt.scatter(np.log10(Lumin_half_V),np.log10(ML_V), marker='.', c='b', s=100, label='SAMI Fornax Dwarfs')#Wolf et al. 2010plt.scatter(np.log10(W_Lumin),np.log10(W_ML), marker='X', c='y', s=100, label='Wolf et al. 2010')#Falcon-Barroso et al. 2011 (SAURON))plt.scatter(np.log10(F11_Lumin_half_V),np.log10(F11_ML_V), marker='+', c='g', s=100, label= 'Falcon-Barroso et al. 2011')#Toloba et al. 2014 (SMAKCED)plt.scatter(np.log10(T14_L_half_V), np.log10(T14_ML_V), marker='*', c='r', s=80, label= 'Toloba et al. 2014')X_fit, Y_fit = zip(*sorted(zip(Lx1, parabola(Lx1, *Lfit_params))))
PB_WSTF, = plt.plot(X_fit, Y_fit, 'k-')#X2_fit, Y2_fit = zip(*sorted(zip(Lx2, parabola(Lx2, *Lfit_params2))))
#PB_WTF, = plt.plot(X2_fit, Y2_fit, 'k-.')
cx.set_xlabel("log($L_{1/2}$) [$L_\odot$]", fontsize = 20)cx.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]", fontsize = 20)cx.tick_params(axis='both', which='major', labelsize=18)xmin = -Lfit_params[1]/(2*Lfit_params[0])
ymin = -Lfit_params[1]**2/(4*Lfit_params[0])+Lfit_params[2]
cx.annotate("[%.3f"%xmin+",%.3f"%ymin+"]", xy=(xmin, ymin), xytext=(xmin-1.75, ymin+0.9),
            arrowprops=dict(arrowstyle="->"),fontsize = 16)
#xmin2 = -Lfit_params2[1]/(2*Lfit_params2[0])
#ymin2 = -Lfit_params2[1]**2/(4*Lfit_params2[0])+Lfit_params2[2]
#cx.annotate("[%.3f"%xmin2+",%.3f"%ymin2+"] WFT", xy=(xmin2, ymin2), xytext=(xmin2-1.0, ymin2+1.2),
#            arrowprops=dict(arrowstyle="->"),fontsize = 16)

plt.legend(fontsize=16)Figure.savefig("../2_pipeline/3_ParabolaFit_MassDyn/Paraola_DyM_DWARF.pdf", bbox_inches='tight')	F11_DMass_half = 930 * np.power(F11_Disper,2) * F11_ReF11_Lumin_half_V = 0.5 * np.power(10, 0.4*(M_V_sun - F11_M_V))F11_ML_V = F11_DMass_half/F11_Lumin_half_VERR_F11_M_dyn = 930 * np.sqrt(np.power(2*F11_Disper*ERR_F11_Disper*F11_Re,2)+np.power(np.power(F11_Disper,2)*ERR_F11_Re,2))ERR_F11_Lum_V = -0.4*F11_Lumin_half_V*np.log(10)*ERR_F11_M_VERR_F11_ML_V = (F11_DMass_half/F11_Lumin_half_V) * np.sqrt(np.power(ERR_F11_M_dyn/F11_DMass_half,2) + np.power(ERR_F11_Lum_V/F11_Lumin_half_V,2))