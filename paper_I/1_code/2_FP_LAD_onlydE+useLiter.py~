from scipy.optimize import minimizeimport numpy as npfrom astropy.io import fitsimport matplotlib.pyplot as pltfrom numpy.polynomial.polynomial import polyfitimport mathimport pandas as pdx_axis = "log_Sigma"#x_axis = "log_Re"name = 1residuals = 0
reverse_axes = 1
#*************************SAMI Input values**************************************************Galaxies = pd.read_csv('../2_pipeline/0_Galaxies_Table/Galaxies_Table_DWARF.csv')FCC_index = Galaxies['FCC']M_r = Galaxies['M_r(mag)']
mu_r = Galaxies['mu_r(mag/arcsec2)']R_eff = Galaxies['R_e(arcsec)'] * 0.092 			#in kpcKinematics = pd.read_csv('../2_pipeline/0_Kinematics_Table/Kinematics_Table_DWARF.csv')Velocity = Kinematics['Velocity']Dispersion = Kinematics['Sigma']#*****************************Toloba et al. 2014 (2 papers)**********************************Toloba14 = pd.read_csv('../0_data/Literature/Toloba14_PhotKinem.csv')T14_Disp = Toloba14['sigma_e[km/s]']
T14_M_r = Toloba14['M_r[mag]']T14_R_e = Toloba14['R_e-r[arcsec]']	* 0.0727 #in kpc
ERR_T14_Disp = Toloba14['sigma_e_ERR']ERR_T14_M_r = 0 # for the time being
ERR_T14_R_e = 0 # for the time being
#Toloba14_2 = pd.read_csv('../0_data/Literature/Toloba14_kinematics.csv')
#T14_epsilon = Toloba14_2['epsilon_e']T14_mu_r = np.zeros(len(Toloba14['M_r[mag]']))
T14_mu_r = Toloba14['M_r[mag]'] + 31.08 + 2.5 * np.log10(math.pi*np.power(Toloba14['R_e-r[arcsec]'],2)) + 2.5 * np.log10(2)
ERR_T14_mu_r = ERR_T14_M_r + (5 / np.log(10)) * (ERR_T14_R_e / Toloba14['R_e-r[arcsec]'])
#*****************************Falcon-Barroso et al. 2011***********************************************Falcon11 = pd.read_csv('../0_data/Literature/FalconBarroso11_Spec.csv')F11_Disper = Falcon11['\sigma_e(km/s)']
Falcon11_2 = pd.read_csv('../0_data/Literature/FalconBarroso11_Phot.csv')F11_Re = math.pi * Falcon11_2['R_{eV}(arcsec)'] * Falcon11_2['D(Mpc)'] / 648 #in kpcF11_M_V = Falcon11_2['M_V(mag)']F11_mu_V = Falcon11_2['\mu_{eV}(mag arcsec^{-2})']
ERR_F11_Re = math.pi * Falcon11_2['R_{eV}_ERR'] * Falcon11_2['D(Mpc)'] / 648ERR_F11_M_r = Falcon11_2['M_V_ERR']ERR_F11_Disper = 0 #for the time being
ERR_F11_mu_V = Falcon11_2['\mu_{eV}_ERR']
F11_M_r = F11_M_V - 0.16F11_mu_r = F11_mu_V - 0.16
#*****************************3d Data***********************************************if x_axis == "log_Sigma":	x = pd.concat([mu_r, T14_mu_r, F11_mu_r])  # \mu_e	y = np.log10(pd.concat([R_eff, T14_R_e, F11_Re]))  # logR_e	z = np.log10(pd.concat([Dispersion, T14_Disp, F11_Disper]))  # log\sigma_eelif x_axis == "log_Re":	x = pd.concat([mu_r, T14_mu_r, F11_mu_r])  # \mu_e	y = np.log10(pd.concat([Dispersion, T14_Disp, F11_Disper]))  # log\sigma_e	z = np.log10(pd.concat([R_eff, T14_R_e, F11_Re]))  # logR_eA = np.c_[x, y, np.ones(x.shape)]#*****************************Fitting_Least Absolute Deviation*********************************************Y = z.copy()X = A.copy()x0 = [-8.70, 0.70, 12.28]def fit(X, params):    #print("----fit function")    #print(params)    return X.dot(params)def cost_function(params, X, Y):    #print("----cost function")    #print(params)    return np.sum(np.abs(Y - fit(X, params)))    output = minimize(cost_function, x0, args=(X, Y))print(output)Y_hat = fit(X, output.x)fig=  plt.figure(figsize = (20,7))ax = fig.add_subplot(1,1,1)b, m = polyfit(Y, Y_hat, 1)fitline = b + m * Ycm = plt.cm.get_cmap('spring')if reverse_axes == 0 :
	plt.plot(Y, fitline, c='grey')	if x_axis == "log_Sigma":		plt.plot(np.log10(Dispersion), output.x[0]*mu_r+output.x[1]*np.log10(R_eff)+output.x[2], 'bo', label='SAMI Fornax Dwarfs')
		plt.plot(np.log10(T14_Disp), output.x[0]*T14_mu_r+output.x[1]*np.log10(T14_R_e)+output.x[2], 'r*', label= 'Toloba et al. 2014')
		plt.plot(np.log10(F11_Disper), output.x[0]*F11_mu_r+output.x[1]*np.log10(F11_Re)+output.x[2],'gX', label= 'Falcon-Barroso et al. 2011')	elif x_axis == "log_Re":		plt.plot(np.log10(R_eff), output.x[0]*mu_r+output.x[1]*np.log10(Dispersion)+output.x[2], 'bo', label='SAMI Fornax Dwarfs')
		plt.plot(np.log10(T14_R_e), output.x[0]*T14_mu_r+output.x[1]*np.log10(T14_Disp)+output.x[2], 'r*', label= 'Toloba et al. 2014')
		plt.plot(np.log10(F11_Re), output.x[0]*F11_mu_r+output.x[1]*np.log10(F11_Disper)+output.x[2],'gX', label= 'Falcon-Barroso et al. 2011')	plt.legend(fontsize=16)	#if name == 1:	#	for i in range(len(FCC_index)):	#		ax.annotate(str(int(FCC_index[i])), (Y[i], Y_hat[i]), fontsize=8)	if x_axis == "log_Sigma":		plt.xlabel('log($\sigma_{15}$)', fontsize=18)		plt.ylabel(str("%.2f" % output.x[0])+' $<\mu_e>$ + ' + str("%.2f" % output.x[1]) + ' log($R_e$) + ' + str("%.2f" % output.x[2]), fontsize=18)		plt.tick_params(axis='both', which='major', labelsize=16)	
	elif x_axis == "log_Re":		plt.xlabel('log$R_e$ (kpc)', fontsize=18)		plt.ylabel(str("%.2f" % output.x[0])+' $<\mu_e>$ + ' + str("%.2f" % output.x[1]) + ' log$\sigma_e$ + ' + str("%.2f" % output.x[2]), fontsize=18)		plt.tick_params(axis='both', which='major', labelsize=16)	
	if x_axis == "log_Sigma":		plt.savefig("../2_pipeline/2_FP_LAD_onlydE+useLiter/FP_LAD+Liter_x=logS_DWARF.pdf")	elif x_axis == "log_Re":		plt.savefig("../2_pipeline/2_FP_LAD_onlydE+useLiter/FP_LAD+Liter_x=logR_DWARF.pdf")

else:
	plt.plot(fitline, Y, c='grey')	if x_axis == "log_Sigma":		plt.plot(output.x[0]*mu_r+output.x[1]*np.log10(R_eff)+output.x[2], np.log10(Dispersion), 'bo', label='SAMI Fornax Dwarfs')
		plt.plot(output.x[0]*T14_mu_r+output.x[1]*np.log10(T14_R_e)+output.x[2], np.log10(T14_Disp), 'r*', label= 'Toloba et al. 2014')
		plt.plot(output.x[0]*F11_mu_r+output.x[1]*np.log10(F11_Re)+output.x[2], np.log10(F11_Disper), 'gX', label= 'Falcon-Barroso et al. 2011')	elif x_axis == "log_Re":		plt.plot(output.x[0]*mu_r+output.x[1]*np.log10(Dispersion)+output.x[2], np.log10(R_eff), 'bo', label='SAMI Fornax Dwarfs')
		plt.plot(output.x[0]*T14_mu_r+output.x[1]*np.log10(T14_Disp)+output.x[2], np.log10(T14_R_e), 'r*', label= 'Toloba et al. 2014')
		plt.plot(output.x[0]*F11_mu_r+output.x[1]*np.log10(F11_Disper)+output.x[2],np.log10(F11_Re), 'gX', label= 'Falcon-Barroso et al. 2011')	plt.legend(fontsize=16)	#if name == 1:	#	for i in range(len(FCC_index)):	#		ax.annotate(str(int(FCC_index[i])), (Y[i], Y_hat[i]), fontsize=8)	if x_axis == "log_Sigma":		plt.ylabel('log($\sigma_{15}$)', fontsize=18)		plt.xlabel(str("%.2f" % output.x[0])+' $<\mu_e>$ + ' + str("%.2f" % output.x[1]) + ' log($R_e$) + ' + str("%.2f" % output.x[2]), fontsize=18)		plt.tick_params(axis='both', which='major', labelsize=16)	
		plt.ylim(0.5, 3.0)	
	elif x_axis == "log_Re":		plt.ylabel('log$R_e$ (kpc)', fontsize=18)		plt.xlabel(str("%.2f" % output.x[0])+' $<\mu_e>$ + ' + str("%.2f" % output.x[1]) + ' log$\sigma_e$ + ' + str("%.2f" % output.x[2]), fontsize=18)		plt.tick_params(axis='both', which='major', labelsize=16)	
	if x_axis == "log_Sigma":		plt.savefig("../2_pipeline/2_FP_LAD_onlydE+useLiter/rev_FP_LAD+Liter_x=logS_DWARF.pdf")	elif x_axis == "log_Re":		plt.savefig("../2_pipeline/2_FP_LAD_onlydE+useLiter/rev_FP_LAD+Liter_x=logR_DWARF.pdf")


#********************************Residuals********************************************if residuals == 1:	def Residual(i):		#print(i, Y[i], X[i], output.x[0], output.x[1])		
		return np.abs(Y[i] - fit(X[i], output.x))/np.sqrt(output.x[0]**2+output.x[1]**2+1)		RS = [Residual(i) for i in range(len(Y))]	out_file = open('../2_pipeline/2_FP_LAD_onlydE+useLiter/Residuals.txt', 'w+')	out_file.write("FCC" + "\t" + "Residual" + "\n")	for i in range(len(RS)):		out_file.write( str(int(FCC_index[i])) + "\t " + str(RS[i]) + "\n" )	out_file.close()	def plot_fun(i, x, y, reverse = None):		ax = fig.add_subplot(2,2,i)		ax.plot(x, y,'.')		plt.ylabel('Perpendicular Residual', fontsize=18)		if reverse != None:			plt.gca().invert_xaxis()		#for i in range(len(FCC_index)):			#ax.annotate(str(int(FCC_index[i])), (x[i], y[i]), fontsize=8)	fig =  plt.figure(figsize = (20,10))	plot_fun(1, x, RS, reverse=1)	plt.xlabel('$<\mu_e>$', fontsize=18)	plt.tick_params(axis='both', which='major', labelsize=16)	
		plot_fun(2, y, RS)	plt.xlabel('log$R_e$', fontsize=18)	plt.tick_params(axis='both', which='major', labelsize=16)	
		plot_fun(3, z, RS)	plt.xlabel('log$\sigma_e$', fontsize=18)	plt.tick_params(axis='both', which='major', labelsize=16)	
		plot_fun(4, M_r, RS, reverse=1)	plt.xlabel('$M_r$', fontsize=18)	plt.tick_params(axis='both', which='major', labelsize=16)	
		plt.savefig('../2_pipeline/2_FP_LAD_onlydE+useLiter/Residuals_Comparison_DWARF.pdf')
