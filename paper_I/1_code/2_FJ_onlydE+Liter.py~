import numpy as npimport matplotlib.pyplot as pltfrom astropy.io import fitsimport csvimport pyfitsimport mathfrom numpy.polynomial.polynomial import polyfitfrom mpl_toolkits.axes_grid1 import make_axes_locatableimport pandas as pd

#*************************SAMI Input values**************************************************Galaxies = pd.read_csv('../2_pipeline/0_Galaxies_Table/Galaxies_Table_DWARF.csv')	FCC_index = Galaxies['FCC']M_r = Galaxies['M_r(mag)']mu_r = Galaxies['mu_r(mag/arcsec2)'] 	#surface brightness calculated with Re in arcsecR_eff = Galaxies['R_e(arcsec)']Kinematics = pd.read_csv('../2_pipeline/0_Kinematics_Table/Kinematics_Table_DWARF.csv')
Dispersion = Kinematics['Sigma']Disp_error = Kinematics['Error.Sigma']
#*****************************Toloba et al. 2014 (2 papers)**********************************Toloba14 = pd.read_csv('../0_data/Literature/Toloba14_PhotKinem.csv')T14_Disp = Toloba14['sigma_e[km/s]']
T14_M_r = Toloba14['M_r[mag]']T14_M_V = 0.16 + T14_M_r 	# Girardi et al. 2004 and Toloba et al. 2014T14_R_e = Toloba14['R_e-r[arcsec]']
ERR_T14_Disp = Toloba14['sigma_e_ERR']
#*****************************Falcon-Barroso et al. 2011*************************************Falcon11 = pd.read_csv('../0_data/Literature/FalconBarroso11_Spec.csv')F11_Disper = Falcon11['\sigma_e(km/s)']
Falcon11_2 = pd.read_csv('../0_data/Literature/FalconBarroso11_Phot.csv')F11_Re = Falcon11_2['R_{eV}(arcsec)']F11_M_V = Falcon11_2['M_V(mag)']F11_mu_V = Falcon11_2['\mu_{eV}(mag arcsec^{-2})']
ERR_F11_Re = Falcon11_2['R_{eV}_ERR']ERR_F11_M_V = Falcon11_2['M_V_ERR']ERR_F11_Disper = 0 #for the time being
ERR_F11_mu_V = Falcon11_2['\mu_{eV}_ERR']
F11_M_r = F11_M_V - 0.16F11_mu_r = F11_mu_V - 0.16
#****************Plotting Faber_Jackson relation********************************************cm = plt.cm.get_cmap('spring')x = pd.concat([M_r, T14_M_r, F11_M_r])y = np.log10(pd.concat([Dispersion, T14_Disp, F11_Disper]))#error = pd.concat([Disp_error, ERR_T14_Disp, ERR_F11_Disper])
y_err = 0#error/(y*np.log(10))b, m = polyfit(x, y, 1)fitline = b + m * xsize = pd.concat([R_eff, T14_R_e, F11_Re])
color = pd.concat([R_eff, T14_R_e, F11_Re])
mark = ["o" for i in range(len(M_r))]+["*" for i in range(len(T14_M_r))]+["x" for i in range(len(F11_M_r))]

fig = plt.figure(figsize = (20,7))ax = fig.add_subplot(1, 1, 1)plt.plot(F11_M_r, np.log10(F11_Disper),'gX', label= 'Falcon-Barroso et al. 2011')
plt.plot(T14_M_r, np.log10(T14_Disp), 'r*', label= 'Toloba et al. 2014')
plt.plot(M_r, np.log10(Dispersion), 'bo', label='SAMI Fornax')
plt.legend()
plt.errorbar(x, y, yerr=y_err, fmt='.', ms=1, ecolor='grey')
plt.plot(x, fitline, c='grey')textstr = 'log($\sigma_{15}$) = ' + str("%.2f" % m) + ' $M_r$ ' + str("%.2f" % b)plt.title(textstr, y=1.05, fontsize=18)major_ticks = np.arange(-14,-23,-1)ax.set_xticks(major_ticks)#for i in range(len(FCC_index)):#	plt.annotate(str(int(FCC_index[i])), (x[i], y[i]), fontsize=8)plt.ylabel('log($\sigma_{15}$) (km/s)', fontsize=18)plt.ylim(-0.5, 3.5)plt.xlabel('$M_r$ (mag)', fontsize=18)plt.tick_params(axis='both', which='major', labelsize=16)

fig.savefig('../2_pipeline/2_FJ_onlydE+Liter/Faber_Jackson_onlyDWARF+Liter.pdf')