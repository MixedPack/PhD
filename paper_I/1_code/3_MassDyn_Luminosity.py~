from scipy.optimize import minimizeimport numpy as npfrom astropy.io import fitsimport matplotlib.pyplot as pltfrom numpy.polynomial.polynomial import polyfitimport mathimport pandas as pd#*****************************Input values**********************************************Galaxies = pd.read_csv('../2_pipeline/0_Galaxies_Table/Galaxies_Table_EXC.csv')	FCC_index = Galaxies['FCC']M_r = Galaxies['M_r(mag)']R_e = Galaxies['R_e(arcsec)'] * 0.092 * 1000		#in pclog_stel_mass = Galaxies['log10(M_*/M_sun)']
ERR_M_r = Galaxies['ERR_m_r(mag)']
ERR_R_e = Galaxies['ERR_R_e(arcsec)']
ERR_log_m = Galaxies['ERR_log10(M_*)']
Kinematics = pd.read_csv('../2_pipeline/1_Kinematics_Table/Kinematics_Table_EXC.csv')Dispersion = Kinematics['Sigma']ERR_Disp = Kinematics['Error.Sigma']

L_sun = 3.848*math.pow(10,26) #watt
L_r_sun = L_sun
M_r_sun = 4.64
Mass_sun = 2*math.pow(10,30) #kg#*****************************Calculation***********************************************Dyn_Mass_half = 930 * np.power(Dispersion,2) * R_e	#M_1/2 half-light ratio dynamical mass [M_Sun]
Lumin_half = 0.5 * np.power(10, 0.4*(M_r_sun - M_r)) #L_1/2 half-light ration luminosity [L_Sun]

Stell_Mass =  np.power(10,log_stel_mass)					#stellar mass in solar mass unit

ERR_M_dyn = 930 * np.sqrt(np.power(2*Dispersion*ERR_Disp*R_e,2)+np.power(np.power(Dispersion,2)*ERR_R_e,2))
ERR_L_half = -0.4*Lumin_half*np.log(10)*ERR_M_r
ERR_ML = (Dyn_Mass_half/Lumin_half) * np.sqrt(np.power(ERR_M_dyn/Dyn_Mass_half,2) + np.power(ERR_L_half/Lumin_half,2))
#*****************************Plotting**************************************************Figure = plt.figure(figsize=(20,7))

ax = Figure.add_subplot(131)
plt.plot(np.log10(Dyn_Mass_half),np.log10(Lumin_half),'o')
ax.errorbar( np.log10(Dyn_Mass_half), np.log10(Lumin_half), 
					xerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), yerr=ERR_L_half/(Lumin_half*np.log(10)), fmt='.', ecolor='grey')
ax.set_xlabel("log($(M_{dyn})_{1/2}$) [$M_\odot$]")
ax.set_ylabel("log($L_{1/2}$) [$L_\odot$]")

bx = Figure.add_subplot(132)
plt.plot(np.log10(Dyn_Mass_half),np.log10(Dyn_Mass_half/Lumin_half),'o')
bx.errorbar( np.log10(Dyn_Mass_half), np.log10(Dyn_Mass_half/Lumin_half),
					xerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), yerr=ERR_ML/((Dyn_Mass_half/Lumin_half)*np.log(10)), fmt='.', ecolor='grey')
bx.set_xlabel("log($(M_{dyn})_{1/2}$) [$M_\odot$]")
bx.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]")

cx = Figure.add_subplot(133)
plt.plot(np.log10(Lumin_half),np.log10(Dyn_Mass_half/Lumin_half),'o')
cx.errorbar( np.log10(Lumin_half), np.log10(Dyn_Mass_half/Lumin_half),
					xerr=ERR_L_half/(Lumin_half*np.log(10)), yerr=ERR_ML/((Dyn_Mass_half/Lumin_half)*np.log(10)), fmt='.', ecolor='grey')
cx.set_xlabel("log($L_{1/2}$) [$L_\odot$]")
cx.set_ylabel("log($(M_{dyn})_{1/2}$ / $L_{1/2}$)  [$M_\odot/L_\odot$]")

Figure.savefig("../2_pipeline/3_MassDyn_Luminosity/DyM-L.pdf")



Figure2 = plt.figure(figsize=(20,7))

ax = Figure2.add_subplot(121)
plt.plot(log_stel_mass, np.log10(Dyn_Mass_half),'.')
ax.errorbar( log_stel_mass, np.log10(Dyn_Mass_half), 
					xerr=ERR_log_m, yerr=ERR_M_dyn/(Dyn_Mass_half*np.log(10)), fmt='.', ecolor='grey')
ax.set_xlabel("log($M_{stel}$) [$M_\odot$]")
ax.set_ylabel("log($M_{dyn}$) [$M_\odot$]")

bx = Figure2.add_subplot(122)
plt.plot(log_stel_mass, np.log10(Dyn_Mass_half)-log_stel_mass,'.')
ax.errorbar( log_stel_mass, np.log10(Dyn_Mass_half)-log_stel_mass, 
					xerr=ERR_log_m, yerr=np.sqrt(np.power(ERR_log_m,2)+np.power(ERR_M_dyn/(Dyn_Mass_half*np.log(10)),2)), fmt='.', ecolor='grey')
bx.set_xlabel("log($M_{stel}$) [$M_\odot$]")
bx.set_ylabel("log($(M_{dyn})_{1/2}$ / $M_{stel}$)")

Figure2.savefig("../2_pipeline/3_MassDyn_Luminosity/DyM_StM.pdf")